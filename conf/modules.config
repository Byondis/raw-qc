/*
 * Define modules options
 */

process {

  // Default
  publishDir = [
    path: { "${params.outDir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
    mode: 'copy',
    saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
  ]

  withName:'fastqcRaw' {
    publishDir = [
      [
        path: { "${params.outDir}/fastqc/zips/" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/fastqc" },
	mode: "copy",
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.when = !params.skipFastqcRaw
  }

  withName:'fastqcTrim' {
    publishDir = [
      [
        path: { "${params.outDir}/fastqc_trimmed/zips/" },
        mode: 'copy',
        pattern: "*.zip"
      ],
      [
        path: { "${params.outDir}/fastqc_trimmed" },
        mode: "copy",
        saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
      ]
    ]
    ext.when = !params.skipFastqcTrim && !params.skipTrimming
  }

  withName:"fastqScreen.*" {
    publishDir = [
      path: { "${params.outDir}/fastqscreen" },
      mode: 'copy'
    ]
    ext.args = "--force --subset 200000 --aligner bowtie2"
    ext.when = !params.skipFastqScreen
  }


  /*
   ===============================
    TrimGalore sub-workflow
   ===============================
  */

  withName: 'trimGalore' {
    publishDir = [
      [
        path: { "${params.outDir}/trimming" },
        mode: 'copy',
        pattern: "*fastq.gz",
        enabled: !params.polyA && !params.smartSeqV4
      ],
      [
        path: { "${params.outDir}/trimming/logs" },
        mode: 'copy',
        pattern: "*trimming_report.txt"
      ]
    ]
    ext.prefix = { "${reads[0].simpleName}_adapter3p" }
    ext.when = params.trimTool == "trimgalore" && !params.skipTrimming
    ext.args = {[
      params.nTrim ? "--trim-n" : "",
      params.twoColour ?  "--2colour ${params.qualTrim}" : "--quality ${params.qualTrim}",
      "--length ${params.minLen}",
      params.picoV2 ? "--clip_r2 3 --three_prime_clip_r1 3" : "",
      params.rnaLig ? meta.singleEnd ? "--clip_r1 1 --three_prime_clip_r1 2" : "--clip_r1 1 --three_prime_clip_r2 2 --clip_r2 1 --three_prime_clip_r1 2" : "",
      params.adapter == 'truseq' ? meta.singleEnd ? "-a ${params.truseqR1}" : "-a ${params.truseqR1} -a2 ${params.truseqR2}" : "",
      params.adapter == 'nextera' ? meta.singleEnd ? "-a ${params.nexteraR1}" : "-a ${params.nexteraR1} -a2 ${params.truseqR2}" : "",
      params.adapter == 'smallrna' ? "-a ${params.smallrnaR1}" : "",
      params.adapter != 'auto' && params.adapter != 'truseq' && params.adapter != 'nextera' && params.adapter != "smallrna" ? params.adapter : ""
    ].join(' ').trim()}
  }

  withName: 'trimmingSummary3p' {
    publishDir = [
      path: { "${params.outDir}/trimming/stats" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.when = !params.skipTrimming
    ext.args = { " -u ${params.trimTool} -t '3-prime adapter'" }
    ext.prefix = { "${meta.id}_adapter3p" }
  }


  withName: 'trimAdapter5p' {
    publishDir = [
      [
        path: { "${params.outDir}/trimming" },
        mode: 'copy',
        pattern: "*.fastq.gz",
        enabled: !params.polyA
      ],
      [
        path: { "${params.outDir}/trimming/logs" },
        mode: 'copy',
        pattern: "*log"
      ]
    ]
    ext.args = {[
      params.smartSeqV4 ? meta.singleEnd ? '-g AAGCAGTGGTATCAACGCAGAGTAC -g AAGCAGTGGTATCAACGCAGAGTACGGG' : ' -G AAGCAGTGGTATCAACGCAGAGTAC -G AAGCAGTGGTATCAACGCAGAGTACGGG -g AAGCAGTGGTATCAACGCAGAGTAC -g AAGCAGTGGTATCAACGCAGAGTACGGG' : '',
      params.adapter5 ?: "",
      "-m ${params.minLen}"
    ].join(' ').trim()} 
    ext.prefix = { "${reads[0].simpleName - '_trimmed_R1'}_adapter5p" }
    ext.when = params.smartSeqV4 || params.adapter5
  }

  withName: 'trimmingSummary5p' {
    publishDir = [
      path: { "${params.outDir}/trimming/stats" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.when = !params.skipTrimming
    ext.args = { " -u cutadapt -t '5-prime adapter'" }
    ext.prefix = { "${meta.id}_adapter5p" }
  }


  withName: 'trimPolyA' {
    publishDir = [
      [
        path: { "${params.outDir}/trimming" },
        mode: 'copy',
        pattern: "*.fastq.gz"
      ],
      [
        path: { "${params.outDir}/trimming/logs" },
        mode: 'copy',
        pattern: "*log"
      ]
    ]
    ext.args = {[
      meta.singleEnd ? "-a A{20} -g T{150}" : "-a A{20} -g T{150} -A A{20} -G T{150}",
      "-m ${params.minLen}",
    ].join(' ').trim()}
    ext.prefix = { "${reads[0].simpleName - '_trimmed_R1'}_polyA" }
    ext.when = params.polyA
  }

  withName: 'trimmingSummaryPolyA' {
    publishDir = [
      path: { "${params.outDir}/trimming/stats" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.when = !params.skipTrimming
    ext.args = { " -u cutadapt -t '3-prime polyA'" }
    ext.prefix = { "${meta.id}_polyA" }
  }

  withName: 'generalMetrics' {
    publishDir = [
      path: { "${params.outDir}/stats" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }                                                                                                                                                                                                        


  /*
   =====================
     Fastp sub-sorkflow
   =====================
  */

  withName: 'fastp' {
    publishDir = [
      [
        path: { "${params.outDir}/trimming" },
        mode: 'copy',
        pattern: "*.fastq.gz"
      ],
      [
        path: { "${params.outDir}/trimming/logs" },
        mode: 'copy',
        pattern: "*{log,json}"
      ]
    ]
    ext.when = params.trimTool == "fastp" && !params.skipTrimming
    ext.args = {[
      "--qualified_quality_phred ${params.qualTrim}",
      params.nTrim ? "" : "--n_base_limit 0",
      params.twoColour ?  "--trim_poly_g" : "--disable_trim_poly_g",
      "--length_required ${params.minLen}",
      params.picoV2 && !${meta.singleEnd} ? "--trim_front2 3 --trim_tail1 3" : "",
      params.rnaLig ? ${meta.singleEnd} ? "--trim_front1 1 --trim_tail1 2" :  "--trim_front1 1 --trim_tail2 2 --trim_front2 1 --trim_tail1 2" : "",
      params.adapter == 'truseq' ? "${meta.singleEnd}" ? "--adapter_sequence ${params.truseqR1}" : "--adapter_sequence ${params.truseqR1} --adapter_sequence_r2 ${params.truseqR2}" : "",
      params.adapter == 'nextera' ? "${meta.singleEnd}" ? "--adapter_sequence ${params.nexteraR1}" : "--adapter_sequence ${params.nexteraR1} --adapter_sequence_r2 ${params.truseqR2}" : "",
      params.adapter == 'smallrna' ? "--adapter_sequence ${params.smallrnaR1}" : "",
      params.adapter != 'auto' && params.adapter != 'truseq' && params.adapter != 'nextera' && params.adapter != "smallrna" ? params.adapter : "",
      params.polyA ? "--trim_poly_x" : ""
    ].join(' ').trim()}
  }

  withName: 'trimmingSummaryFastp' {
    publishDir = [
      path: { "${params.outDir}/trimming/stats" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
    ext.when = !params.skipTrimming
    ext.args = { " -u fastp -t '3-prime adapters'" }
    ext.prefix = { "${meta.id}_adapter" }
  }


  /*
  ============
      PDX
  ============
  */

  withName:'xengsort' {
    publishDir = [
      [
        path: { "${params.outDir}/xengsort/${meta.id}" },
        mode: 'copy',
        pattern: '*fastq.gz'
      ],
      [
        path: { "${params.outDir}/xengsort/logs" },
        mode: 'copy',
        pattern: '*.log'
      ]
    ]
    ext.when = params.pdx
  }

  withName: 'generalMetrics' {
    publishDir = [
      path: { "${params.outDir}/stats" },
      mode: 'copy',
      saveAs: { filename -> filename.equals('versions.txt') ? null : filename }
    ]
  }

  withName:'getSoftwareVersions' {
    publishDir = [
      path: { "${params.outDir}/softwareVersions" },
      mode: 'copy'
    ]
  }

  withName:'outputDocumentation' {
    publishDir = [
      path: { "${params.summaryDir}" },
      mode: 'copy'
    ]
  }

}
